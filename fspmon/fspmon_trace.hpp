#ifndef _FSPMON_TRACE_HPP_
#define _FSPMON_TRACE_HPP_


//[Guid("97D3BA91-0336-4D09-8DD2-929C37766183")]
#define WPP_CONTROL_GUIDS                                                               \
    WPP_DEFINE_CONTROL_GUID(                                                            \
        wslfltGuid, (97D3BA91,0336,4D09,8DD2,929C37766183),                             \
        WPP_DEFINE_BIT(TRACE_FLAG_INITIALIZATION)           /* bit  0 = 0x00000001 */   \
        WPP_DEFINE_BIT(TRACE_FLAG_UNINITIALIZATION)         /* bit  1 = 0x00000002 */   \
        WPP_DEFINE_BIT(TRACE_FLAG_FILE_FILTER)              /* bit  2 = 0x00000004 */   \
        WPP_DEFINE_BIT(TRACE_FLAG_REGISTRY_FILTER)          /* bit  3 = 0x00000008 */   \
        WPP_DEFINE_BIT(TRACE_FLAG_PROCESS_FILTER)           /* bit  4 = 0x00000010 */   \
        WPP_DEFINE_BIT(TRACE_FLAG_COMMUNICATION)            /* bit  5 = 0x00000020 */   \
        )

#define WPP_LEVEL_FLAGS_LOGGER(lvl,flags) \
           WPP_LEVEL_LOGGER(flags)

#define WPP_LEVEL_FLAGS_ENABLED(lvl, flags) \
           (WPP_LEVEL_ENABLED(flags) && WPP_CONTROL(WPP_BIT_ ## flags).Level >= lvl)


//
// This comment block is scanned by the trace preprocessor to define our
// TraceEvents function.
//
// begin_wpp config
//
// FUNC InitLogTrace{LEVEL=TRACE_LEVEL_VERBOSE, FLAGS=TRACE_FLAG_INITIALIZATION}(MSG, ...);
// FUNC InitLogInfo{LEVEL=TRACE_LEVEL_INFORMATION, FLAGS=TRACE_FLAG_INITIALIZATION}(MSG, ...);
// FUNC InitLogWarning{LEVEL=TRACE_LEVEL_WARNING, FLAGS=TRACE_FLAG_INITIALIZATION}(MSG, ...);
// FUNC InitLogError{LEVEL=TRACE_LEVEL_ERROR, FLAGS=TRACE_FLAG_INITIALIZATION}(MSG, ...);
// FUNC InitLogCritical{LEVEL=TRACE_LEVEL_CRITICAL, FLAGS=TRACE_FLAG_INITIALIZATION}(MSG, ...);
//
// FUNC UninitLogTrace{LEVEL=TRACE_LEVEL_VERBOSE, FLAGS=TRACE_FLAG_UNINITIALIZATION}(MSG, ...);
// FUNC UninitLogInfo{LEVEL=TRACE_LEVEL_INFORMATION, FLAGS=TRACE_FLAG_UNINITIALIZATION}(MSG, ...);
// FUNC UninitLogWarning{LEVEL=TRACE_LEVEL_WARNING, FLAGS=TRACE_FLAG_UNINITIALIZATION}(MSG, ...);
// FUNC UninitLogError{LEVEL=TRACE_LEVEL_ERROR, FLAGS=TRACE_FLAG_UNINITIALIZATION}(MSG, ...);
// FUNC UninitLogCritical{LEVEL=TRACE_LEVEL_CRITICAL, FLAGS=TRACE_FLAG_UNINITIALIZATION}(MSG, ...);
//
// FUNC FfLogTrace{LEVEL=TRACE_LEVEL_VERBOSE, FLAGS=TRACE_FLAG_FILE_FILTER}(MSG, ...);
// FUNC FfLogInfo{LEVEL=TRACE_LEVEL_INFORMATION, FLAGS=TRACE_FLAG_FILE_FILTER}(MSG, ...);
// FUNC FfLogWarning{LEVEL=TRACE_LEVEL_WARNING, FLAGS=TRACE_FLAG_FILE_FILTER}(MSG, ...);
// FUNC FfLogError{LEVEL=TRACE_LEVEL_ERROR, FLAGS=TRACE_FLAG_FILE_FILTER}(MSG, ...);
// FUNC FfLogCritical{LEVEL=TRACE_LEVEL_CRITICAL, FLAGS=TRACE_FLAG_FILE_FILTER}(MSG, ...);
//
// FUNC RfLogTrace{LEVEL=TRACE_LEVEL_VERBOSE, FLAGS=TRACE_FLAG_REGISTRY_FILTER}(MSG, ...);
// FUNC RfLogInfo{LEVEL=TRACE_LEVEL_INFORMATION, FLAGS=TRACE_FLAG_REGISTRY_FILTER}(MSG, ...);
// FUNC RfLogWarning{LEVEL=TRACE_LEVEL_WARNING, FLAGS=TRACE_FLAG_REGISTRY_FILTER}(MSG, ...);
// FUNC RfLogError{LEVEL=TRACE_LEVEL_ERROR, FLAGS=TRACE_FLAG_REGISTRY_FILTER}(MSG, ...);
// FUNC RfLogCritical{LEVEL=TRACE_LEVEL_CRITICAL, FLAGS=TRACE_FLAG_REGISTRY_FILTER}(MSG, ...);
//
// FUNC PfLogTrace{LEVEL=TRACE_LEVEL_VERBOSE, FLAGS=TRACE_FLAG_PROCESS_FILTER}(MSG, ...);
// FUNC PfLogInfo{LEVEL=TRACE_LEVEL_INFORMATION, FLAGS=TRACE_FLAG_PROCESS_FILTER}(MSG, ...);
// FUNC PfLogWarning{LEVEL=TRACE_LEVEL_WARNING, FLAGS=TRACE_FLAG_PROCESS_FILTER}(MSG, ...);
// FUNC PfLogError{LEVEL=TRACE_LEVEL_ERROR, FLAGS=TRACE_FLAG_PROCESS_FILTER}(MSG, ...);
// FUNC PfLogCritical{LEVEL=TRACE_LEVEL_CRITICAL, FLAGS=TRACE_FLAG_PROCESS_FILTER}(MSG, ...);
//
// FUNC CommLogTrace{LEVEL=TRACE_LEVEL_VERBOSE, FLAGS=TRACE_FLAG_COMMUNICATION}(MSG, ...);
// FUNC CommLogInfo{LEVEL=TRACE_LEVEL_INFORMATION, FLAGS=TRACE_FLAG_COMMUNICATION}(MSG, ...);
// FUNC CommLogWarning{LEVEL=TRACE_LEVEL_WARNING, FLAGS=TRACE_FLAG_COMMUNICATION}(MSG, ...);
// FUNC CommLogError{LEVEL=TRACE_LEVEL_ERROR, FLAGS=TRACE_FLAG_COMMUNICATION}(MSG, ...);
// FUNC CommLogCritical{LEVEL=TRACE_LEVEL_CRITICAL, FLAGS=TRACE_FLAG_COMMUNICATION}(MSG, ...);
//
// end_wpp

#endif // _FSPMON_TRACE_HPP_
